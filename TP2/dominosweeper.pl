:- use_module(library(clpfd)).
:- use_module(library(lists)).
:- use_module(library(random)).

% Tabuleiro 6vs6
% A1, A2, A3, A4, A5, A6
% B1, B2, B3, B4, B5, B6
% C1, C2, C3, C4, C5, C6
% D1, D2, D3, D4, D5, D6
% E1, E2, E3, E4, E5, E6
% F1, F2, F3, F4, F5, F6

% Cell values:
% -1 = Mine
% 0 = 0
% 1 = 1
% 2 = 2
% 3 = 3
% 4 = 4
%
% Obs: With the given restrictions, a higher value than 4 in any cell is impossible.

dominosweeper(Vars) :-
	Vars = [A1, A2, A3, A4, A5, A6, B1, B2, B3, B4, B5, B6, C1, C2, C3, C4, C5, C6, D1, D2, D3, D4, D5, D6, E1, E2, E3, E4, E5, E6, F1, F2, F3, F4, F5, F6],
	domain(Vars, -1, 4),
	
	% Each mine is adjacent to exactly one other mine -v
	(A1 #= -1) #<=> ((A2 #= -1) #\ (B1 #= -1) #\ (B2 #= -1)),
	(A2 #= -1) #<=> ((A1 #= -1) #\ (A3 #= -1) #\ (B1 #= -1) #\ (B2 #= -1) #\ (B3 #= -1)),
	(A3 #= -1) #<=> ((A2 #= -1) #\ (A4 #= -1) #\ (B2 #= -1) #\ (B3 #= -1) #\ (B4 #= -1)),
	(A4 #= -1) #<=> ((A3 #= -1) #\ (A5 #= -1) #\ (B3 #= -1) #\ (B4 #= -1) #\ (B5 #= -1)),
	(A5 #= -1) #<=> ((A4 #= -1) #\ (A6 #= -1) #\ (B4 #= -1) #\ (B5 #= -1) #\ (B6 #= -1)),
	(A6 #= -1) #<=> ((A5 #= -1) #\ (B5 #= -1) #\ (B6 #= -1)),
	
	(B1 #= -1) #<=> ((A1 #= -1) #\ (A2 #= -1) #\ (B2 #= -1) #\ (C1 #= -1) #\ (C2 #= -1)),
	(B2 #= -1) #<=> ((A1 #= -1) #\ (A2 #= -1) #\ (A3 #= -1) #\ (B1 #= -1) #\ (B3 #= -1) #\ (C1 #= -1) #\ (C2 #= -1) #\ (C3 #= -1)),
	(B3 #= -1) #<=> ((A2 #= -1) #\ (A3 #= -1) #\ (A4 #= -1) #\ (B2 #= -1) #\ (B4 #= -1) #\ (C2 #= -1) #\ (C3 #= -1) #\ (C4 #= -1)),
	(B4 #= -1) #<=> ((A3 #= -1) #\ (A4 #= -1) #\ (A5 #= -1) #\ (B3 #= -1) #\ (B5 #= -1) #\ (C3 #= -1) #\ (C4 #= -1) #\ (C5 #= -1)),
	(B5 #= -1) #<=> ((A4 #= -1) #\ (A5 #= -1) #\ (A6 #= -1) #\ (B4 #= -1) #\ (B6 #= -1) #\ (C4 #= -1) #\ (C5 #= -1) #\ (C6 #= -1)),
	(B6 #= -1) #<=> ((A5 #= -1) #\ (A6 #= -1) #\ (B5 #= -1) #\ (C5 #= -1) #\ (C6 #= -1)),
	
	(C1 #= -1) #<=> ((B1 #= -1) #\ (B2 #= -1) #\ (C2 #= -1) #\ (D1 #= -1) #\ (D2 #= -1)),
	(C2 #= -1) #<=> ((B1 #= -1) #\ (B2 #= -1) #\ (B3 #= -1) #\ (C1 #= -1) #\ (C3 #= -1) #\ (D1 #= -1) #\ (D2 #= -1) #\ (D3 #= -1)),
	(C3 #= -1) #<=> ((B2 #= -1) #\ (B3 #= -1) #\ (B4 #= -1) #\ (C2 #= -1) #\ (C4 #= -1) #\ (D2 #= -1) #\ (D3 #= -1) #\ (D4 #= -1)),
	(C4 #= -1) #<=> ((B3 #= -1) #\ (B4 #= -1) #\ (B5 #= -1) #\ (C3 #= -1) #\ (C5 #= -1) #\ (D3 #= -1) #\ (D4 #= -1) #\ (D5 #= -1)),
	(C5 #= -1) #<=> ((B4 #= -1) #\ (B5 #= -1) #\ (B6 #= -1) #\ (C4 #= -1) #\ (C6 #= -1) #\ (D4 #= -1) #\ (D5 #= -1) #\ (D6 #= -1)),
	(C6 #= -1) #<=> ((B5 #= -1) #\ (B6 #= -1) #\ (C5 #= -1) #\ (D5 #= -1) #\ (D6 #= -1)),
	
	(D1 #= -1) #<=> ((C1 #= -1) #\ (C2 #= -1) #\ (D2 #= -1) #\ (E1 #= -1) #\ (E2 #= -1)),
	(D2 #= -1) #<=> ((C1 #= -1) #\ (C2 #= -1) #\ (C3 #= -1) #\ (D1 #= -1) #\ (D3 #= -1) #\ (E1 #= -1) #\ (E2 #= -1) #\ (E3 #= -1)),
	(D3 #= -1) #<=> ((C2 #= -1) #\ (C3 #= -1) #\ (C4 #= -1) #\ (D2 #= -1) #\ (D4 #= -1) #\ (E2 #= -1) #\ (E3 #= -1) #\ (E4 #= -1)),
	(D4 #= -1) #<=> ((C3 #= -1) #\ (C4 #= -1) #\ (C5 #= -1) #\ (D3 #= -1) #\ (D5 #= -1) #\ (E3 #= -1) #\ (E4 #= -1) #\ (E5 #= -1)),
	(D5 #= -1) #<=> ((C4 #= -1) #\ (C5 #= -1) #\ (C6 #= -1) #\ (D4 #= -1) #\ (D6 #= -1) #\ (E4 #= -1) #\ (E5 #= -1) #\ (E6 #= -1)),
	(D6 #= -1) #<=> ((C5 #= -1) #\ (C6 #= -1) #\ (D5 #= -1) #\ (E5 #= -1) #\ (E6 #= -1)),
	
	(E1 #= -1) #<=> ((D1 #= -1) #\ (D2 #= -1) #\ (E2 #= -1) #\ (F1 #= -1) #\ (F2 #= -1)),
	(E2 #= -1) #<=> ((D1 #= -1) #\ (D2 #= -1) #\ (D3 #= -1) #\ (E1 #= -1) #\ (E3 #= -1) #\ (F1 #= -1) #\ (F2 #= -1) #\ (F3 #= -1)),
	(E3 #= -1) #<=> ((D2 #= -1) #\ (D3 #= -1) #\ (D4 #= -1) #\ (E2 #= -1) #\ (E4 #= -1) #\ (F2 #= -1) #\ (F3 #= -1) #\ (F4 #= -1)),
	(E4 #= -1) #<=> ((D3 #= -1) #\ (D4 #= -1) #\ (D5 #= -1) #\ (E3 #= -1) #\ (E5 #= -1) #\ (F3 #= -1) #\ (F4 #= -1) #\ (F5 #= -1)),
	(E5 #= -1) #<=> ((D4 #= -1) #\ (D5 #= -1) #\ (D6 #= -1) #\ (E4 #= -1) #\ (E6 #= -1) #\ (F4 #= -1) #\ (F5 #= -1) #\ (F6 #= -1)),
	(E6 #= -1) #<=> ((D5 #= -1) #\ (D6 #= -1) #\ (E5 #= -1) #\ (F5 #= -1) #\ (F6 #= -1)),
	
	(F1 #= -1) #<=> ((F2 #= -1) #\ (E1 #= -1) #\ (E2 #= -1)),
	(F2 #= -1) #<=> ((F1 #= -1) #\ (F3 #= -1) #\ (E1 #= -1) #\ (E2 #= -1) #\ (E3 #= -1)),
	(F3 #= -1) #<=> ((F2 #= -1) #\ (F4 #= -1) #\ (E2 #= -1) #\ (E3 #= -1) #\ (E4 #= -1)),
	(F4 #= -1) #<=> ((F3 #= -1) #\ (F5 #= -1) #\ (E3 #= -1) #\ (E4 #= -1) #\ (E5 #= -1)),
	(F5 #= -1) #<=> ((F4 #= -1) #\ (F6 #= -1) #\ (E4 #= -1) #\ (E5 #= -1) #\ (E6 #= -1)),
	(F6 #= -1) #<=> ((F5 #= -1) #\ (E5 #= -1) #\ (E6 #= -1)).
	% Each mine is adjacent to exactly one other mine -^
	
	% Each cell with a number is adjacent to exactly that number of mines among the cells touching it -v
	
	% Each cell with a number is adjacent to exactly that number of mines among the cells touching it -^
	
magic3(Vars) :-
	Vars=[A1,A2,A3,A4,A5,A6,A7,A8,A9],
	domain(Vars,1,9),
	all_distinct(Vars),
	A1+A2+A3 #= Soma,
	A4+A5+A6 #= Soma,
	A7+A8+A9 #= Soma,
	A1+A4+A7 #= Soma,
	A2+A5+A8 #= Soma,
	A3+A6+A9 #= Soma,
	A1+A5+A9 #= Soma,
	A3+A5+A7 #= Soma,
	labeling([],Vars).

magic4(Vars) :-
	Vars = [A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16],
	domain(Vars, 1, 16),
	all_distinct(Vars),
	A1 + A2 + A3 + A4 #= Soma,
	A5 + A6 + A7 + A8 #= Soma,
	A9 + A10 + A11 + A12 #= Soma,
	A13 + A14 + A15 + A16 #= Soma,
	A1 + A5 + A9 + A13 #= Soma,
	A2 + A6 + A10 + A14 #= Soma,
	A3 + A7 + A11 + A15 #= Soma,
	A4 + A8 + A12 + A16 #= Soma,
	A1 + A6 + A11 + A16 #= Soma,
	A4 + A7 + A10 + A13 #= Soma,
	labeling([], Vars).